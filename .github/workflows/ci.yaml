name: Terraform CI Pipeine (Reusable)
description: |
  This is a reusable GitHub Actions workflow for CI/CD using Terraform.
  It includes steps for linting, validating, scanning, and building AWS resources.
  The workflow is designed to be triggered by other workflows or manually.
  It also includes steps for checking environments, detecting changes, and preparing builds.

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to (e.g., ci, devl, test, prod)."
        required: true
        type: string
      terraform-dir:
        description: "Directory containing Terraform configuration files."
        required: true
        type: string
        default: "tf"
      tf-vars-file:
        description: "Terraform variables file to use."
        required: false
        type: string
        default: "terraform.tfvars"
      ci-pipeline:
        description: "Indicates if this is a CI pipeline run."
        required: false
        type: boolean
        default: true
    secrets:
      aws-role-arn:
        description: "AWS role ARN for assuming a role."
        required: true
      infracost-api-key:
        description: "API key for Infracost."
        required: true
      infracost-gist-id:
        description: "Gist ID for Infracost output."
        required: true

permissions:
  id-token: write
  contents: write
  # actions: read


jobs:
  check-environments:
    name: üîé Check Env
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Check Available Environments
        id: check
        uses: subhamay-bhattacharyya-gha/check-environments-action@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          org-short-name: ${{ vars.ORG_SHORT_NAME }}
          region: ${{ vars.AWS_REGION }}

  check-branch-issue:
    name: üîé Check Branch
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/main' }}
    steps:
      - name: Verify branch issue
        id: branch-issue
        uses: subhamay-bhattacharyya-gha/branch-issue-action@main

        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Outputs
        run: |
          echo "Branch Issue: ${{ steps.branch-issue.outputs.issue-number }}"
          echo "Branch Issue: ${{ steps.branch-issue.outputs.issue-exists }}"

  detect-changes:
    name: üîé Detect Change
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/main' }}
    outputs:
      files-changed: ${{ steps.repo-changes.outputs.files-changed }}
      json-output: ${{ steps.repo-changes.outputs.json-output }}
      has-changes: ${{ steps.repo-changes.outputs.has-changes }}

    steps:
      - name: Detect repository changes
        id: repo-changes
        uses: subhamay-bhattacharyya-gha/list-updated-files-action@main

  detect-services:
    name: üîé Detect Services
    runs-on: ubuntu-latest
    outputs:
      services-used: ${{ steps.scan.outputs.services-used }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Scan AWS Services
        id: scan
        uses: subhamay-bhattacharyya-gha/scan-aws-services-action@main

      - name: Save Detected Services to Environment Variable
        run: |
          echo "Detected Services: ${{ steps.scan.outputs.services-used }}"
          echo 'SERVICES_USED=${{ steps.scan.outputs.services-used }}' >> $GITHUB_ENV

      - name: Print AWS Service Detection Table
        run: |
          echo "## AWS Services Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service               | Used |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------------|------|" >> $GITHUB_STEP_SUMMARY

          echo "üîç Raw SERVICES_USED: $SERVICES_USED"

          node -e "
            try {
              const raw = process.env.SERVICES_USED;
              const result = JSON.parse(raw);
              const emoji = (val) => val ? '‚úÖ' : '‚ùå';
              const rows = Object.entries(result)
                .map(([key, val]) => \`| \${key.padEnd(22)} | \${emoji(val)} |\`)
                .join('\n');

              require('fs').appendFileSync(process.env.GITHUB_STEP_SUMMARY, rows + '\n');
            } catch (e) {
              console.error('‚ùå Failed to parse SERVICES_USED:', e.message);
              console.error('üí• Value received:', process.env.SERVICES_USED);
              process.exit(1);
            }
          "

  execution-path:
    name: üîé Det. Exec Path
    runs-on: ubuntu-latest
    needs: [check-environments, check-branch-issue, detect-services, detect-changes]
    outputs:
      execution-path: ${{ steps.set-path.outputs.execution-path }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Determine services used and repo changes
        id: prepare-inputs
        run: |
          echo "${{ needs.detect-changes.outputs.json-output }}" | base64 -d > repo-changes.json
          sed -E 's/([{,])([^:{]+):/\1"\2":/g' <<< "${{ needs.detect-services.outputs.services-used }}" > services-used.json

      - name: Debug parsed input files
        run: |
          echo "Repo Changes JSON"
          cat repo-changes.json
          echo "---------------------------"
          echo "Services Used JSON"
          cat services-used.json

      - name: Set Execution Path
        id: set-path
        uses: subhamay-bhattacharyya-gha/exec-path-action@main
        with:
          files-modified: repo-changes.json
          services-used: services-used.json

      - name: Validate Execution Path Output
        if: steps.set-path.outputs.execution-path == ''
        run: |
          echo "Execution path output is empty, setting default fallback."
          echo "EXECUTION_PATH={}" >> $GITHUB_ENV

      - name: Set Fallback Output if Needed
        if: steps.set-path.outputs.execution-path == ''
        run: echo "execution-path={}" >> $GITHUB_OUTPUT

  terraform-validate:
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path).IaC == true }}
    name: ‚úîÔ∏è Terraform Validate
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [execution-path, detect-services, detect-changes]
    steps:

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Validation and Formatting Checks
        id: validate
        uses: subhamay-bhattacharyya-gha/tf-validate-action@main
        with:
          terraform-dir: ${{ inputs.terraform-dir }}              
          s3-bucket: ${{ vars.TF_STATE_BUCKET_NAME }}
          s3-region: ${{ vars.AWS_REGION }}
          ci-pipeline: "true"
          soft-fail: "true"                                  

  terraform-lint:
    name: üìã Terraform Lint
    runs-on: ubuntu-latest
    needs: [execution-path, detect-services, detect-changes]
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path).IaC == true }}
    steps:
      - name: Run TFLint
        uses: subhamay-bhattacharyya-gha/tf-lint-action@main
        with:
          tflint-ver: "v0.52.0"
          use-cache: "true"
          tflint-format: "compact"

  checkov-scan:
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path).IaC == true }}
    name: üß≥ Checkov Scan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [execution-path, detect-services, detect-changes]
    steps:

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Checkov Scan
        uses: subhamay-bhattacharyya-gha/checkov-scan-action@main
        id: checkov-scan
        with:
          iac-dir: ${{ inputs.terraform-dir }}
          iac-framework: terraform
          soft-fail: true

      - name: Confirm SARIF file type
        shell: bash
        run: |
          ls -la "${{ github.workspace }}"
          file "${{ github.workspace }}/results.sarif"

      - name: "üìã Summarize and Print Checkov Scan Report with Snippets"
        id: summarize-report
        uses: subhamay-bhattacharyya-gha/checkov-report-action@main

  build-lambda:
    name: üõ†Ô∏è ‚õî Lambda Package
    if: ${{ toJSON(needs.execution-path.outputs.execution-path).lambda == true }}
    runs-on: ubuntu-latest
    needs: [execution-path, detect-services, detect-changes]
    steps:
      - name: Build and Upload Lambda Package
        run: echo "Uploading Lambda package..."

  build-lambda-layer:
    name: üõ†Ô∏è ‚õî Lambda Layer
    if: ${{ toJSON(needs.execution-path.outputs.execution-path)['lambda-layer'] == true }}
    runs-on: ubuntu-latest
    needs: [execution-path, detect-services, detect-changes]
    steps:
    
      - name: Build Lambda Layer Package
        run: echo "No changes in Lambda layer package, skipping build..."

      - name: Build and Upload Lambda Layer Package
        run: echo "Build and Upload Lambda layer...."

  build-glue:
    name: üõ†Ô∏è ‚õî Glue Script
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path).glue == true }}
    runs-on: ubuntu-latest
    needs: [execution-path, detect-services, detect-changes]
    steps:

      - name: Package Glue Script
        run: echo "No changes found in Glue script, skipping build..."

      - name: Package and Upload Glue Script
        run: echo "Uploading Glue script..."

  build-state-machine:
    name: üõ†Ô∏è ‚õî State Machine
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path)['state-machine'] == true }}
    runs-on: ubuntu-latest
    needs: [execution-path, detect-services, detect-changes]
    steps:

      - name: Package State Machine
        run: echo "No changes in State Machine, skipping build."

      - name: Upload State Machine ASL
        run: echo "Uploading State Machine ASL..."

  yor-resource-tagging:
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path).IaC == true }}
    name: üìã Apply Git Metadata Tags using YOR
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [ terraform-lint, terraform-validate, checkov-scan ]
    steps:
      - name: Call Yor Reusable Action
        uses: subhamay-bhattacharyya-gha/tf-yor-action@main
        with:
          terraform-dir: ${{ inputs.terraform-dir }}
         
  terraform-plan:
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path).IaC == true }}
    name: üìã Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [ yor-resource-tagging ]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Plan
        id: plan
        uses: subhamay-bhattacharyya-gha/tf-plan-action@main
        with:
          terraform-dir: ${{ inputs.terraform-dir }} 
          tf-vars-file: ${{ inputs.tf-vars-file }}
          s3-bucket: ${{ vars.TF_STATE_BUCKET_NAME }}
          s3-region: ${{ vars.AWS_REGION }}
          ci-pipeline: ${{ inputs.ci-pipeline }}

  infra-cost:
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path).IaC == true }}
    name: üí∞ Infra Cost
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [terraform-plan]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Infra Cost
        id: infra-cost
        uses: subhamay-bhattacharyya-gha/infracost-action@main
        with:
          terraform-dir: ${{ inputs.terraform-dir }} 
          ci-pipeline: ${{ inputs.ci-pipeline }}
          s3-bucket: ${{ vars.TF_STATE_BUCKET_NAME }}
          s3-region: ${{ vars.AWS_REGION }}
          infracost-api-key: ${{ secrets.infracost-api-key }}
          gist-id: ${{ secrets.infracost-gist-id }}
          environment: ${{ inputs.environment }}

  terraform-apply:
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path).IaC == true }}
    name: üöß Terraform Apply
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [infra-cost]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Apply
        uses: subhamay-bhattacharyya-gha/tf-apply-action@main
        id: apply
        with:
          terraform-dir: ${{ inputs.terraform-dir }}
          s3-bucket: ${{ vars.TF_STATE_BUCKET_NAME }}
          s3-region: ${{ vars.AWS_REGION }}
          ci-pipeline: ${{ inputs.ci-pipeline }}

  terraform-destroy:
    if: ${{ fromJSON(needs.execution-path.outputs.execution-path).IaC == true }}
    name: ‚úÇÔ∏è Terraform Destroy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [terraform-apply]
    steps:

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Destroy
        uses: subhamay-bhattacharyya-gha/tf-destroy-action@main
        id: destroy
        with:
          terraform-dir: ${{ inputs.terraform-dir }}
          s3-bucket: ${{ vars.TF_STATE_BUCKET_NAME }}
          s3-region: ${{ vars.AWS_REGION }}
          ci-pipeline: ${{ inputs.ci-pipeline }}

  create-release:
    name: üöÄ Create Release
    runs-on: ubuntu-latest
    if: |
        (needs.build-lambda.result == 'success' ||
          needs.build-lambda-layer.result == 'success' ||
          needs.build-glue.result == 'success' ||
          needs.build-state-machine.result == 'success' ||
          needs.terraform-destroy.result == 'success') &&
          github.ref == 'refs/heads/main'
    needs: 
    - build-lambda
    - build-lambda-layer
    - build-glue
    - build-state-machine
    - terraform-validate
    - terraform-lint
    - checkov-scan
    - infra-cost
    - terraform-plan
    - terraform-apply
    - terraform-destroy
    steps:
      - name: Create Release
        uses: subhamay-bhattacharyya-gha/create-release-action@feature/GHA-0002-initial-release
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

